name: Publish Release

on:
  push:
    branches:
      - 'main'
    paths:
      - "Docs/CHANGELOG.md"
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.get_repo_name.outputs.repo_name }}
      version: ${{ steps.get_version.outputs.version }}
      old_version: ${{ steps.get_version.outputs.old_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get repo name
        id: get_repo_name
        run: |
          ## Used for release zip
          echo "repo_name=CRYPT-GUI" >> $GITHUB_OUTPUT

      - name: Get version tag
        id: get_version
        shell: bash
        run: |
          # Read the first 2 lines from CHANGELOG.md and remove '## ' & '# Changelog' from the output and return only the version
          version=v$(grep -m 2 '^' Docs/CHANGELOG.md | sed 's/^## //' | sed 's/# Changelog//' | grep -m 1 '[0-9]*\.[0-9]*\.[0-9]*')
          # Read old_version file until a blankline is reached and return the output
          old_version=$(while read -r line; do echo "$line"; done < .release/old_version)

          echo "Version: $version"
          echo "Old Version: $old_version"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "old_version=$old_version" >> $GITHUB_OUTPUT

  release:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.create_source_assets.outputs.version }}
      repo_name: ${{ steps.create_source_assets.outputs.repo_name }}
    env:
      version: ${{ needs.prepare.outputs.version }}
      old_version: ${{ needs.prepare.outputs.old_version }}
      repo_name: ${{ needs.prepare.outputs.repo_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Create source assets
        id: create_source_assets
        run: |
          repo_name=${{ env.repo_name }}
          version=${{ env.version }}
          output_zip="source-${repo_name}-${version}.zip"
          output_xz="source-${repo_name}-${version}.tar.xz"
          git config tar.tar.xz.command "xz -c"

          git archive --format zip -9 --prefix="${repo_name}/" --output "$output_zip" HEAD
          git archive --format tar.xz -9 --prefix="${repo_name}/" --output "$output_xz" HEAD

          echo "output_zip=$output_zip" >> $GITHUB_ENV
          echo "output_xz=$output_xz" >> $GITHUB_ENV
          echo "version=$version" >> GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> GITHUB_OUTPUT

      - name: Create SHA256 checksums
        id: hash_source_assets
        shell: bash
        run: |
          # Show and write hashes to SHA256_CHECKSUMS.txt
          FILE=SOURCE_SHA256.txt
          sha256sum ${{ env.output_zip }} | tee $FILE
          sha256sum ${{ env.output_xz }} | tee -a $FILE

          # Check them again
          sha256sum -c $FILE

          # Save for upload
          echo "output_source_checksums=$FILE" >> $GITHUB_ENV

      - name: Get description
        id: get_desc
        shell: bash
        run: |
          description=""
          while IFS= read -r line; do
            [[ -z "$line" ]] && break
            description+="$line
          "
          done < Docs/CHANGELOG.md

          description+="
          **Full Changelog:** https://github.com/ninja-left/CRYPT-GUI/compare/${{ env.old_version }}...${{ env.version }}"

          echo "Description:"
          echo "-----"
          echo "$description"
          echo "-----"

          ## https://trstringer.com/github-actions-multiline-strings/#option-2---environment-variable
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body: ${{ steps.get_desc.outputs.release_body }}
          draft: false
          prerelease: false

      - name: Upload zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.output_zip }}
          asset_name: ${{ env.output_zip }}
          asset_content_type: application/zip

      - name: Upload tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.output_xz }}
          asset_name: ${{ env.output_xz }}
          asset_content_type: application/x-gtar

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.output_source_checksums }}
          asset_name: ${{ env.output_source_checksums }}
          asset_content_type: application/txt

  build-linux:
    needs: release
    runs-on: ubuntu-latest
    env:
      RELEASE_URL: ${{ needs.release.outputs.release_url }}
      repo_name: ${{ needs.release.outputs.repo_name }}
      version: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.2'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller -D \
          --clean \
          -n CRYPT \
          -s \
          -i modules/design/images/icon.png \
          --add-data modules/plugins:modules/plugins \
          --add-data Docs:Docs \
          --add-data default_config.yaml:. \
          --add-data modules/design:modules/design \
          --log-level ERROR \
          Crypt.py

          mv dist/CRYPT/_internal/modules dist/CRYPT/_internal/default_config.yaml dist/CRYPT/_internal/Docs dist/CRYPT/
          ls -lh dist/CRYPT

      - name: Compress
        run: |
          output_name="linux-${{ env.repo_name }}-${{ env.version }}.tar.xz"

          tar caf $output_name dist/*

          echo "output_linux=$output_name" >> $GITHUB_ENV

      - name: Create SHA256 checksums
        run: |
          compiled=${{ env.output_linux }}
          FILE=$compiled.sha256
          sha256sum $compiled | tee $FILE

          # Check them again
          sha256sum -c $FILE

          # Save for upload
          echo "linux_checksum=$FILE" >> $GITHUB_ENV

      - name: Upload archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.output_linux }}
          asset_name: ${{ env.output_linux }}
          asset_content_type: application/x-gtar

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.linux_checksum }}
          asset_name: ${{ env.linux_checksum }}
          asset_content_type: application/txt

  build-macos:
    needs: release
    runs-on: macos-latest
    env:
      RELEASE_URL: ${{ needs.release.outputs.release_url }}
      repo_name: ${{ needs.release.outputs.repo_name }}
      version: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.2'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller -D \
          --clean \
          -n CRYPT \
          -s \
          -i modules/design/images/icon.icns \
          --add-data modules/plugins:modules/plugins \
          --add-data Docs:Docs \
          --add-data default_config.yaml:. \
          --add-data modules/design:modules/design \
          --log-level ERROR \
          Crypt.py

          mv dist/CRYPT/_internal/modules dist/CRYPT/_internal/default_config.yaml dist/CRYPT/_internal/Docs dist/CRYPT/
          ls -lh dist/CRYPT

      - name: Compress
        run: |
          output_name="macos-${{ env.repo_name }}-${{ env.version }}.tar.xz"

          tar caf $output_name dist/*

          echo "output_macos=$output_name" >> $GITHUB_ENV

      - name: Create SHA256 checksums
        run: |
          FILE=${{ env.output_macos }}.sha256
          shasum -a 256 ${{ env.output_macos }} | tee $FILE

          # Save for upload
          echo "macos_checksum=$FILE" >> $GITHUB_ENV

      - name: Upload archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.output_macos }}
          asset_name: ${{ env.output_macos }}
          asset_content_type: application/x-gtar

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.macos_checksum }}
          asset_name: ${{ env.macos_checksum }}
          asset_content_type: application/txt

  build-windows:
    needs: release
    runs-on: windows-latest
    env:
      RELEASE_URL: ${{ needs.release.outputs.release_url }}
      repo_name: ${{ needs.release.outputs.repo_name }}
      version: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.2'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          # \ -> ` in powershell
          pyinstaller -D `
          --clean `
          -n CRYPT `
          -s `
          -i modules/design/images/icon.ico `
          --add-data "modules/plugins:modules/plugins" `
          --add-data "Docs:Docs" `
          --add-data "default_config.yaml:." `
          --add-data "modules/design:modules/design" `
          --log-level ERROR `
          Crypt.py

          move dist/CRYPT/_internal/modules dist/CRYPT/
          move dist/CRYPT/_internal/default_config.yaml dist/CRYPT/
          move dist/CRYPT/_internal/Docs dist/CRYPT/
          dir dist/CRYPT

      - name: Compress
        run: |
          $output_name="windows-${{ env.repo_name }}-${{ env.version }}.zip"
          echo $output_name

          Compress-Archive -Path './dist/*' -DestinationPath './$output_name'

          echo "output_windows=$output_name" >> $GITHUB_ENV

      - name: Create SHA256 checksums
        run: |
          $FILE="${{ env.output_windows }}.sha256"
          $HASH = Get-FileHash -Path ${{ env.output_windows }} -Algorithm SHA256

          echo "$HASH.Hash"
          $HASH.Hash | Out-File $FILE
          # Save for upload
          echo "windows_checksum=$FILE" >> $GITHUB_ENV

      - name: Upload archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.output_windows }}
          asset_name: ${{ env.output_windows }}
          asset_content_type: application/zip

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ env.windows_checksum }}
          asset_name: ${{ env.windows_checksum }}
          asset_content_type: application/txt

  finish-up:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Update old_version
        shell: bash
        run: |
          echo "${{ env.version }}" >.release/old_version
          echo "\n">.release/old_version
          echo "Old version content:"
          cat .release/old_version
