name: Publish Release

on:
  push:
    branches:
      - 'main'
    paths:
      - "Docs/CHANGELOG.md"
  workflow_dispatch:
    inputs:
      releaseType:
        description: Release Type
        required: false
        default: test
        type: choice
        options:
          - test
          - release

env:
  repo_name: CRYPT-GUI
  python_version: 3.11.9

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_body: ${{ steps.get_desc.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version tag
        id: get_version
        shell: bash
        run: |
          # Read the first 2 lines from CHANGELOG.md and remove '## ' & '# Changelog' from the output and return only the version
          version=v$(grep -m 2 '^' Docs/CHANGELOG.md | sed 's/^## //' | sed 's/# Changelog//' | grep -m 1 '[0-9]*\.[0-9]*\.[0-9]*')
          # Read old_version file until a blankline is reached and return the output
          old_version=$(while read -r line; do echo "$line"; done < .release/old_version)

          echo "Version: $version"
          echo "Old Version: $old_version"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_ENV
          echo "old_version=$old_version" >> $GITHUB_ENV

      - name: Get description
        id: get_desc
        shell: bash
        run: |
          description=""
          while IFS= read -r line; do
            [[ -z "$line" ]] && break
            description+="$line
          "
          done < Docs/CHANGELOG.md

          description+="
          **Full Changelog:** https://github.com/ninja-left/CRYPT-GUI/compare/${{ env.old_version }}...${{ env.version }}"

          echo "Description:"
          echo "-----"
          echo "$description"
          echo "-----"

          ## https://trstringer.com/github-actions-multiline-strings/#option-2---environment-variable
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-linux:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: Install dependencies
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          pyinstaller -D \
          --clean \
          -n CRYPT \
          -s \
          -i modules/design/images/icon.png \
          --add-data modules/plugins:modules/plugins \
          --add-data Docs:Docs \
          --add-data default_config.yaml:. \
          --add-data modules/design:modules/design \
          --log-level ERROR \
          Crypt.py

          mv dist/CRYPT/_internal/modules dist/CRYPT/_internal/default_config.yaml dist/CRYPT/_internal/Docs dist/CRYPT/
          ## Move CRYPT to the project root so compiled archive's root folder is CRYPT not dist/CRYPT
          mv dist/CRYPT .
          rmdir dist
          ls -lh CRYPT/

      - name: Test
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        shell: bash
        run: |
          pip install pytest pytest-qt
          cd CRYPT
          ./CRYPT --test
          exit_code=$?
          echo $exit_code
          rm event.log  # Remove generated log

          if [ $exit_code -ne 0 ]; then
            echo "Program failed with exit code $exit_code"
            exit $exit_code
          fi

      - name: Compress
        run: |
          repo_name=${{ env.repo_name }}
          output_name="linux-${repo_name}.tar.xz"
          echo $repo_name
          echo $output_name

          if [ '${{ inputs.releaseType }}' == 'test' ]; then {
            touch $output_name
          }
          else {
            tar caf $output_name CRYPT/
          }
          fi

          echo "output_linux=$output_name" >> $GITHUB_ENV

      - name: Create SHA256 checksums
        run: |
          compiled=${{ env.output_linux }}
          echo $compiled
          FILE="${compiled}.sha256"
          sha256sum $compiled | tee $FILE

          # Check them again
          sha256sum -c $FILE

          # Save for upload
          echo "linux_checksum=$FILE" >> $GITHUB_ENV

      - name: Upload archive
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: Compiled-Lin
          path: |
            ${{ env.output_linux }}
            ${{ env.linux_checksum }}

      - name: show assets
        if: ${{ contains(inputs.releaseType, 'test') }}
        run: |
          echo ${{ env.linux_checksum }}
          echo ${{ env.output_linux }}

  build-macos:
    needs: prepare
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: Install dependencies
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          pyinstaller -D \
          --clean \
          -n CRYPT \
          -s \
          -i modules/design/images/icon.icns \
          --add-data modules/plugins:modules/plugins \
          --add-data Docs:Docs \
          --add-data default_config.yaml:. \
          --add-data modules/design:modules/design \
          --log-level ERROR \
          Crypt.py

          mv dist/CRYPT/_internal/modules dist/CRYPT/_internal/default_config.yaml dist/CRYPT/_internal/Docs dist/CRYPT/
          ## Move CRYPT to the project root so compiled archive's root folder is CRYPT not dist/CRYPT
          mv dist/CRYPT .
          rmdir dist
          ls -lh CRYPT/

      - name: Test
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        shell: bash
        run: |
          pip install pytest pytest-qt
          cd CRYPT
          ./CRYPT --test
          exit_code=$?
          echo $exit_code
          rm event.log  # Remove generated log

          if [ $exit_code -ne 0 ]; then
            echo "Program failed with exit code $exit_code"
            exit $exit_code
          fi

      - name: Compress
        run: |
          repo_name=${{ env.repo_name }}
          output_name="macos-${repo_name}.tar.xz"
          echo $output_name
          echo $repo_name

          if [ '${{ inputs.releaseType }}' == 'test' ]; then {
            touch $output_name
          } else {
            tar caf $output_name CRYPT/
          }
          fi

          echo "output_macos=$output_name" >> $GITHUB_ENV

      - name: Create SHA256 checksums
        run: |
          FILE=${{ env.output_macos }}.sha256
          echo $FILE
          shasum -a 256 ${{ env.output_macos }} | tee $FILE

          # Save for upload
          echo "macos_checksum=$FILE" >> $GITHUB_ENV

      - name: Upload archive
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: Compiled-Mac
          path: |
            ${{ env.output_macos }}
            ${{ env.macos_checksum }}

      - name: show assets
        if: ${{ contains(inputs.releaseType, 'test') }}
        run: |
          echo ${{ env.macos_checksum }}
          echo ${{ env.output_macos }}

  build-windows:
    needs: prepare
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: Install dependencies
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          pyinstaller -D `
            --clean `
            -n CRYPT `
            -s `
            -i modules/design/images/icon.ico `
            --add-data "modules/plugins:modules/plugins" `
            --add-data "Docs:Docs" `
            --add-data "default_config.yaml:." `
            --add-data "modules/design:modules/design" `
            --log-level ERROR Crypt.py

          Move-Item dist/CRYPT/_internal/modules dist/CRYPT/
          Move-Item dist/CRYPT/_internal/default_config.yaml dist/CRYPT/
          Move-Item dist/CRYPT/_internal/Docs dist/CRYPT/
          ## Move CRYPT to the project root so compiled archive's root folder is CRYPT not dist/CRYPT
          Move-Item -Path "dist\CRYPT" -Destination "."
          Remove-Item -Path "dist" -Recurse
          Get-ChildItem CRYPT

      - name: Test
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        shell: bash
        run: |
          pip install pytest pytest-qt
          cd CRYPT
          ./CRYPT.exe --test
          exit_code=$?
          echo $exit_code
          rm event.log  # Remove generated log

          if [ $exit_code -ne 0 ]; then
            echo "Program failed with exit code $exit_code"
            exit $exit_code
          fi

      - name: Compress
        run: |
          $repo_name="${{ env.repo_name }}"
          $output_name="windows-$repo_name.zip"

          if ('${{ inputs.releaseType }}' -eq 'test') {
              Set-Content $output_name "test"
          } else {
              Compress-Archive -Path './CRYPT' -DestinationPath "./$output_name"
          }

          echo "output_windows=$output_name" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create SHA256 checksums
        run: |
          $FILE="${{ env.output_windows }}.sha256"
          echo "$FILE"

          if ('${{ inputs.releaseType }}' -eq 'test') {
              Set-Content $FILE "text"
          } else {
              $HASH = Get-FileHash -Path "${{ env.output_windows }}" -Algorithm SHA256
              Set-Content $FILE "$($HASH.Hash)"
          }

          echo "windows_checksum=$FILE" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload archive
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: Compiled-Win
          path: |
            ${{ env.output_windows }}
            ${{ env.windows_checksum }}

      - name: show assets
        if: ${{ contains(inputs.releaseType, 'test') }}
        run: |
          echo ${{ env.windows_checksum }}
          echo ${{ env.output_windows }}

  release:
    needs: [prepare, build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.source_assets.outputs.version }}
    env:
      version: ${{ needs.prepare.outputs.version }}
      release_body: ${{ needs.prepare.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4

      - name: Create source assets
        id: source_assets
        run: |
          repo_name=${{ env.repo_name }}
          version=${{ env.version }}
          output_zip="source-${repo_name}.zip"
          output_xz="source-${repo_name}.tar.xz"
          echo $repo_name
          echo $version
          echo $output_zip
          echo $output_xz

          git config tar.tar.xz.command "xz -c"

          if [ ${{ inputs.releaseType }} == 'test' ]; then {
            touch $output_zip; touch $output_xz
          } else {
            git archive --format zip -9 --prefix="${repo_name}/" --output "$output_zip" HEAD
            git archive --format tar.xz -9 --prefix="${repo_name}/" --output "$output_xz" HEAD
          }
          fi

          ls -lh

          echo "output_zip=$output_zip" >> $GITHUB_ENV
          echo "output_xz=$output_xz" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create SHA256 checksums
        id: hash_source_assets
        shell: bash
        run: |
          # Show and write hashes to SHA256_CHECKSUMS.txt
          FILE=SOURCE_SHA256.txt
          sha256sum ${{ env.output_zip }} | tee $FILE
          sha256sum ${{ env.output_xz }} | tee -a $FILE

          # Check them again
          sha256sum -c $FILE

          # Save for upload
          echo "output_source_checksums=$FILE" >> $GITHUB_ENV

      - name: Download all artifacts
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: actions/download-artifact@v4

      - name: Move to-be-upload files to deploy
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        run: |
          mkdir -v deploy
          ls -lhAX
          mv --verbose ${{ env.output_zip }} ${{ env.output_xz }} Compiled-Lin/* Compiled-Win/* Compiled-Mac/* deploy
          ls -lhAX deploy/

      - name: Create release & upload files
        if: ${{ contains(inputs.releaseType, 'release') || github.event_name == 'push' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: deploy/*
          tag: ${{ env.version }}
          file_glob: true
          body: |
            ${{ needs.prepare.outputs.release_body }}

      - name: show assets
        if: ${{ contains(inputs.releaseType, 'test') }}
        run: |
          echo ${{ env.output_zip }}
          echo ${{ env.output_xz }}
          echo ${{ env.output_source_checksums }}

  finish-up:
    needs: [release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      version: ${{ needs.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Update old_version
        shell: bash
        run: |
          echo ${{ env.version }}
          if [ '${{ inputs.releaseType }}' == 'test' ]; then {
            echo "No changes made to .release/old_version"
          } else {
            git checkout -b patch
            echo "${{ env.version }}" >.release/old_version
            echo "\n">.release/old_version
            echo "Old version content:"
            cat .release/old_version
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .release/old_version
            git commit -m "Update old_version to ${{ env.version }}"
            git push origin patch
          }
          fi
